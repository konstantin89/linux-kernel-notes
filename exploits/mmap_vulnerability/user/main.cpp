#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>

#define DEVICE_FILE "/dev/mmap_char_dev"
#define BUF_SIZE 4096

typedef struct MappedData
{
    int i;
    char str[16];
    unsigned char binData[256];
} MappedData;

static void DumpBuffer(char* buffer, size_t size) 
{
    if (buffer == NULL) 
    {
        printf("Buffer is NULL\n");
        return;
    }

    int lineLength = 0;
    for (int i = 0; i < size; i++) 
    {
        if (lineLength == 128) 
        {
            putchar('\n'); 
            lineLength = 0;
        }
        putchar(buffer[i]); 
        lineLength++;

        if (buffer[i] == '\n') 
        {
            lineLength = 0;
        }
    }
    putchar('\n');  
}

int main() 
{
    int fd;
    char *map;

    fd = open(DEVICE_FILE, O_RDWR);
    if (fd == -1) {
        perror("Failed to open the device");
        return EXIT_FAILURE;
    }

    unsigned long mmapStart = 0x42424000;

    size_t mapSize = BUF_SIZE * 10;

    map = (char*)mmap((void*)mmapStart, mapSize, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);

    if (map == MAP_FAILED) 
    {
        perror("mmap failed");
        close(fd);
        return EXIT_FAILURE;
    }

    DumpBuffer(map, mapSize);

    // Now, you can read and write to the mapped memory area as if it's an array.
    // For example, let's write a string to it:
    //snprintf(map, BUF_SIZE, "Hello, mmap!");

    MappedData *data = (MappedData*)map;
    printf("Data: [%d], [%s] \n", data->i, data->str);

    // Unmap and close the file
    munmap(map, BUF_SIZE);
    close(fd);

    return EXIT_SUCCESS;
}